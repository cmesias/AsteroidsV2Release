
struct Colony {
public:
	int x,y,w,h;
	int spawnTimer;
	int spawned;
	int maxSpawn;
	bool alive;
	bool mouseOnColony;
	string type;
};

struct Asteroid {
public:
	float x,y,w,h;
	float angle;
	int angleSpe, angleDir;
	float vX,vY;
	float speed;
	bool alive;
	bool collision;
	bool MouseOnAsteroid;
	bool onScreen;
	string type;
	int health;
	bool damaged; 		//Asteroid is damaged
	int damagedTimer;	//Asteroid damaged animation timer
};

void initAsteroid(Asteroid asteroid[]) {
	for (int i = 0; i < 128; i++) {
		asteroid[i].x 				= 0;
		asteroid[i].y 				= 0;
		asteroid[i].w 				= 0;
		asteroid[i].h 				= 0;
		asteroid[i].vX 				= 0.0;
		asteroid[i].vY 				= 0.0;
		asteroid[i].speed 			= 0.0;
		asteroid[i].angle 			= 0.0;
		asteroid[i].angleSpe 		= 0;
		asteroid[i].angleDir 		= 0;
		asteroid[i].damagedTimer 	= 0;
		asteroid[i].health 			= 100;
		asteroid[i].alive 			= false;
		asteroid[i].collision 		= false;
		asteroid[i].MouseOnAsteroid = false;
		asteroid[i].damaged 		= false;
		asteroid[i].onScreen 		= false;
		asteroid[i].type 			= "";
	}
}

void spawnAsteroidAngle(Asteroid asteroid[],
		int x, int y,
		int w, int h,
		double angle, double speed) {
	for (int i = 0; i < 128; i++)
	{
		if (!asteroid[i].alive)
		{
			asteroid[i].w 				= w;
			asteroid[i].h 				= h;
			if (w == 48){
				asteroid[i].type 		= "small";
			}else if (w==96){
				asteroid[i].type 		= "medium";
			}else if (w==128){
				asteroid[i].type 		= "large";
			}
			asteroid[i].x 				= x;
			asteroid[i].y 				= y;
			asteroid[i].speed 			= speed;
			asteroid[i].vX 				= cos( (PI/180)*(angle) );
			asteroid[i].vY 				= sin( (PI/180)*(angle) );
			asteroid[i].angle 			= 0.0;
			asteroid[i].damagedTimer 	= 0;
			asteroid[i].health			= 100;
			asteroid[i].angleSpe 		= fRand(1.0, 2.5);
			if (asteroid[i].angleSpe % 2 == 0){
				asteroid[i].angleDir 	= 1;}else{
				asteroid[i].angleDir 	= -1;}
			asteroid[i].MouseOnAsteroid = false;
			asteroid[i].collision 		= false;
			asteroid[i].alive 			= true;
			asteroid[i].onScreen 		= false;
			asteroid[i].damaged 		= false;
			ASTEROIDS++;
			break;
		}
	}
}

void spawnAsteroid(Asteroid asteroid[], int spawnx, int spawny, int w, int h, int targetx,int targety, float speed, string type) {
	for (int i = 0; i < 128; i++) {
		if (!asteroid[i].alive) {
			asteroid[i].health 			= 100;
			asteroid[i].type 			= type;
			asteroid[i].x 				= spawnx;
			asteroid[i].y 				= spawny;
			asteroid[i].w 				= w;
			asteroid[i].h 				= h;
			asteroid[i].speed 			= speed;
			float distance 				= sqrt((targetx - spawnx)* (targetx - spawnx - asteroid[i].w / 2)+
										   	   (targety - spawny)* (targety - spawny - asteroid[i].h / 2));
			asteroid[i].vX 				= (targetx - spawnx - asteroid[i].w / 2) / distance;
			asteroid[i].vY 				= (targety - spawny - asteroid[i].h / 2) / distance;
			asteroid[i].damagedTimer 	= 0;
			asteroid[i].angle 			= 0.0;
			asteroid[i].angleSpe 		= fRand(1.0, 2.5);
			if (asteroid[i].angleSpe % 2 == 0){
				asteroid[i].angleDir 	= 1;}else{
				asteroid[i].angleDir 	= -1;}
			asteroid[i].collision 		= false;
			asteroid[i].damaged 		= false;
			asteroid[i].MouseOnAsteroid = false;
			asteroid[i].onScreen 		= false;
			asteroid[i].alive 			= true;
			ASTEROIDS++;
			break;
		}
	}
}

// [0]: remove asteroid,
void configAsteroid(Asteroid asteroid[], int command, int mx, int my) {
	for (int i = 0; i < 128; i++) {
		if (asteroid[i].alive) {
			switch (command){
				case 0:
					if (asteroid[i].MouseOnAsteroid) {
						asteroid[i].alive = false;
						ASTEROIDS--;
					}
				break;
			}
		}
	}
}

void copyAsteroidOnMouse(Asteroid asteroid[]) {
	//COPY THE WIDTH/HEIGHT OF THE BLOCK YOU ARE CURRENTLY OVER
	for (int i = 0; i < 128; i++) {
		if (asteroid[i].alive) {
			if (asteroid[i].MouseOnAsteroid){
				BLOCKX = asteroid[i].x;
				BLOCKY = asteroid[i].y;
				BLOCKW = asteroid[i].w;
				BLOCKH = asteroid[i].h;
			}
		}
	}
}

// Update asteroid
void updateAsteroid(Asteroid asteroid[], Explosion explosion[], bool alive, bool shield, unsigned int &score, int visionX, int visionY, int objectRadius, int &health, int mx, int my, int camx, int camy) {
	for (int i = 0; i < 128; i++)
	{
		if (asteroid[i].alive)
		{
			/////////////////////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////// CIRCLE COLLISION //////////////////////////////////////
			//-----------------------------------------------------------------------------------------//
			if (alive) {
				// Asteroid collision target
				float bmx = visionX;
				float bmy = visionY;

				//Calculate distance of asteroid and player
				float distance = sqrt((bmx - asteroid[i].x - asteroid[i].w / 2)* (bmx - asteroid[i].x- asteroid[i].w / 2) +
								      (bmy - asteroid[i].y - asteroid[i].h / 2)* (bmy - asteroid[i].y- asteroid[i].h / 2));

				if (distance < objectRadius + asteroid[i].w/2 && !shield){
					asteroid[i].health -= 50;
					health -= 20;
				}
			}
			//-----------------------------------------------------------------------------------------//
			///////////////////////////////////// CIRCLE COLLISION //////////////////////////////////////
			/////////////////////////////////////////////////////////////////////////////////////////////

			// Asteroid movement
			asteroid[i].x += asteroid[i].vX * asteroid[i].speed;
			asteroid[i].y += asteroid[i].vY * asteroid[i].speed;

			// Asteroid spin
			asteroid[i].angle += asteroid[i].angleSpe * asteroid[i].angleDir;

			// Asteroid screen check
			if (asteroid[i].x + asteroid[i].w >= camx && asteroid[i].x <= camx + gWindow.getWidth() &&
				asteroid[i].y + asteroid[i].h >= camy && asteroid[i].y <= camy + gWindow.getHeight()) {
				asteroid[i].onScreen = true;
			}else{
				asteroid[i].onScreen = false;
			}

			// Mouse on Asteroid
			if (mx > asteroid[i].x && mx < asteroid[i].x + asteroid[i].w &&
				my > asteroid[i].y && my < asteroid[i].y + asteroid[i].h) {
				asteroid[i].MouseOnAsteroid = true;
			} else {
				asteroid[i].MouseOnAsteroid = false;
			}

			//Asteroid damaged animation timer
			if (asteroid[i].damaged){
				asteroid[i].damagedTimer += 1;
				if (asteroid[i].damagedTimer > 20){
					asteroid[i].damaged = false;
					asteroid[i].damagedTimer = 0;
				}
			}

			// Asteroid death
			if (asteroid[i].health <= 0)
			{
				//Spawn explosion after asteroid death
				explosions.spawn(explosion, asteroid[i].x+asteroid[i].w/2-asteroid[i].w/2, asteroid[i].y+asteroid[i].h/2-asteroid[i].h/2,
										  asteroid[i].w, asteroid[i].h, 255, "normal");

				if (asteroid[i].type=="large"){
					for (int j = 0; j < 2; j++) {
			            double randAngle 	= fRand(0.0, 360.0);
			            double radian		= (PI/180)*(randAngle);
			            double radianCos	= cos(radian);
			            double radianSin	= sin(radian);
			            spawnAsteroidAngle(asteroid, asteroid[i].x+asteroid[i].w/2-96/2 + (10 * radianCos),
			            							 asteroid[i].y+asteroid[i].h/2-96/2 + (10 * radianSin),
													 96, 96,
			    									 randAngle, 1.3);
					}
					score += 20;
					enem.mileScore += 20;

				}else if (asteroid[i].type=="medium"){
					for (int j = 0; j < 2; j++) {
			            double randAngle 	= fRand(0.0, 360.0);
			            double radian		= (PI/180)*(randAngle);
			            double radianCos	= cos(radian);
			            double radianSin	= sin(radian);
			            spawnAsteroidAngle(asteroid, asteroid[i].x+asteroid[i].w/2-48/2 + (10 * radianCos),
			            							 asteroid[i].y+asteroid[i].h/2-48/2 + (10 * radianSin),
													 48, 48,
			    									 randAngle, 2.3);
					}
					score += 50;
					enem.mileScore += 50;
				}else if (asteroid[i].type=="small"){
					score += 100;
					enem.mileScore += 100;
				}
				asteroid[i].alive = false;
				ASTEROIDS--;
			}

			// Asteroid and Map collision
			if (asteroid[i].x+asteroid[i].w < map.x) {
				asteroid[i].x = map.x+map.w;
			}
			if (asteroid[i].x > map.x+map.w) {
				asteroid[i].x = map.x-asteroid[i].w;
			}
			if (asteroid[i].y+asteroid[i].h < map.y) {
				asteroid[i].y = map.y+map.h;
			}
			if (asteroid[i].y > map.y+map.h) {
				asteroid[i].y = map.y-asteroid[i].h;
			}
		}
	}
}

//Render asteroid
void renderAsteroid(Asteroid asteroid[], int camx, int camy) {
	for (int i = 0; i < 128; i++) {
		if (asteroid[i].alive) {

			//if (asteroid[i].onScreen){
				if (asteroid[i].type=="large"){
					gAsteroid.render(gRenderer12, asteroid[i].x - camx, asteroid[i].y - camy, asteroid[i].w, asteroid[i].h, &rAsteroid[2], asteroid[i].angle);
				}
				if (asteroid[i].type=="medium"){
					gAsteroid.render(gRenderer12, asteroid[i].x - camx, asteroid[i].y - camy, asteroid[i].w, asteroid[i].h, &rAsteroid[1], asteroid[i].angle);
				}
				if (asteroid[i].type=="small"){
					gAsteroid.render(gRenderer12, asteroid[i].x - camx, asteroid[i].y - camy, asteroid[i].w, asteroid[i].h, &rAsteroid[0], asteroid[i].angle);
				}
			//}


			/*std::stringstream tempsi;

			tempsi.str(std::string());
			tempsi << "asteroid[i].x: " << asteroid[i].x;
			gText.loadFromRenderedText(tempsi.str().c_str(), white, gFont13);
			gText.render(50, 0, gText.getWidth(), gText.getHeight());

			tempsi.str(std::string());
			tempsi << "asteroid[i].y: " << asteroid[i].y;
			gText.loadFromRenderedText(tempsi.str().c_str(), white, gFont13);
			gText.render(50, 15, gText.getWidth(), gText.getHeight());

			tempsi.str(std::string());
			tempsi << "asteroid[i].w: " << asteroid[i].w;
			gText.loadFromRenderedText(tempsi.str().c_str(), white, gFont13);
			gText.render(50, 30, gText.getWidth(), gText.getHeight());

			tempsi.str(std::string());
			tempsi << "asteroid[i].h: " << asteroid[i].h;
			gText.loadFromRenderedText(tempsi.str().c_str(), white, gFont13);
			gText.render(50, 45, gText.getWidth(), gText.getHeight());

			tempsi.str(std::string());
			tempsi << "asteroid[i].alive: " << asteroid[i].alive;
			gText.loadFromRenderedText(tempsi.str().c_str(), white, gFont13);
			gText.render(50, 60, gText.getWidth(), gText.getHeight());


			// Render asteroid collision box
			SDL_Rect tempRect = { asteroid[i].x  - camx, asteroid[i].y - camy, asteroid[i].w, asteroid[i].h };
			SDL_SetRenderDrawColor(gRenderer12, 255, 255, 255, 255);
			SDL_RenderDrawRect(gRenderer12, &tempRect);

			//If the player's mouse is on top of asteroid then show certain details of asteroid
			if (asteroid[i].MouseOnAsteroid) {
				SDL_Rect tempRect = { asteroid[i].x  - camx, asteroid[i].y - camy, asteroid[i].w, asteroid[i].h };
				SDL_SetRenderDrawColor(gRenderer12, 0, 255, 0, 255);
				SDL_RenderDrawRect(gRenderer12, &tempRect);
			}

			if (asteroid[i].damaged) {
				SDL_Rect blockcb = { asteroid[i].x  - camx, asteroid[i].y
						- camy, asteroid[i].w, asteroid[i].h };
				SDL_SetRenderDrawColor(gRenderer12, 244, 100, 0, 255);
				SDL_RenderDrawRect(gRenderer12, &blockcb);
			}*/
		}
	}
}


/////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////// COLONY VARIABLES //////////////////////////////////////
//-----------------------------------------------------------------------------------------//
void initColony(Colony colony[]) {
	for (int i = 0; i < 200; i++) {
		colony[i].x = 0;
		colony[i].y = 0;
		colony[i].w = 0;
		colony[i].h = 0;
		colony[i].spawnTimer 		= 0;
		colony[i].spawned 			= 0;
		colony[i].maxSpawn 			= 10;
		colony[i].type 				= "";
		colony[i].alive 			= false;
		colony[i].mouseOnColony 	= false;
	}
}
void spawnColony(Colony colony[], int x, int y, int w, int h) {
	for (int i = 0; i < 200; i++){
		if (!colony[i].alive){
			if (colonyIndex == 1){
				colony[i].type = "asteroid";
			}
			colony[i].x 			= x;
			colony[i].y 			= y;
			colony[i].w 			= w;
			colony[i].h 			= h;
			colony[i].spawnTimer 	= 0;
			colony[i].spawned 		= 0;
			colony[i].maxSpawn 		= 1;
			colony[i].mouseOnColony = false;
			colony[i].alive 		= true;
			colonyCount++;
			break;
		}
	}
}
void removeColony(Colony colony[]) {
	for (int i = 0; i < 200; i++) {
		if (colony[i].alive) {
			if (colony[i].mouseOnColony) {
				colony[i].alive = false;
				colonyCount--;
			}
		}
	}
}
void updateColony(Colony colony[], Asteroid asteroid[], int targetX, int targetY, int mx, int my, int camx, int camy)
{
	for (int i = 0; i < 200; i++)
	{
		if (colony[i].alive)
		{
			// Mouse on Colony check
			if (mx > colony[i].x && mx < colony[i].x + colony[i].w &&
				my > colony[i].y && my < colony[i].y + colony[i].h) {
				colony[i].mouseOnColony = true;
			} else {
				colony[i].mouseOnColony = false;
			}

			// Handle events for "small-asteroid"
			if (colony[i].type == "asteroid")
			{
				colony[i].spawnTimer += 1;
				if (colony[i].spawnTimer > 60)
				{
					colony[i].spawnTimer 	= 0;
					colony[i].spawned 	   += 1;
		            int randAngle 			= fRand(0.0, 360.0);
		            spawnAsteroidAngle(asteroid, colony[i].x, colony[i].y, colony[i].w, colony[i].h,
		    									 randAngle, 0.5);
				}

				// Destroy Colony after max spawns has been reached
				if (colony[i].spawned >= colony[i].maxSpawn){
					colony[i].alive = false;
					colonyCount--;
				}
			}
		}
	}
}
void renderColony(Colony colony[], int camx, int camy) {
	for (int i = 0; i < 200; i++) {
		if (colony[i].alive) {
			SDL_Rect colonyRect = { colony[i].x-camx, colony[i].y-camy, colony[i].w, colony[i].h};
			SDL_SetRenderDrawColor(gRenderer12, 244, 144, 20, 255);
			SDL_RenderDrawRect(gRenderer12, &colonyRect);
		}
	}
}
//-----------------------------------------------------------------------------------------//
///////////////////////////////////// COLONY VARIABLES //////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


// Tile placement info
void renderBlockGhosts(int mx, int my)
{
	std::stringstream pIndex2;
	pIndex2 << PLACING_TYPE;
	gText.loadFromRenderedText(pIndex2.str().c_str(), {255, 255, 255, 255}, gFont13, gRenderer12);
	gText.render(gRenderer12, 5, 31, gText.getWidth(), gText.getHeight());

	if (PLACING_TYPE == 2){
		SDL_Rect placeblockborder2 = { mx, my, BLOCKW * HOWMANYBLOCKSW, BLOCKH* HOWMANYBLOCKSH };
		SDL_SetRenderDrawColor(gRenderer12, 244, 144, 25, 255);
		SDL_RenderDrawRect(gRenderer12, &placeblockborder2);

		std::stringstream pIndex;
		pIndex << colonyIndex;
		gText.loadFromRenderedText(pIndex.str().c_str(), {244, 144, 25, 255}, gFont13, gRenderer12);
		gText.render(gRenderer12, 5, 44, gText.getWidth(), gText.getHeight());
	}
	if (PLACING_TYPE == 3){
		SDL_Rect placeblockborder2 = { mx, my, BLOCKW * HOWMANYBLOCKSW, BLOCKH* HOWMANYBLOCKSH };
		SDL_SetRenderDrawColor(gRenderer12, 0, 128, 255, 255);
		SDL_RenderDrawRect(gRenderer12, &placeblockborder2);

		std::stringstream pIndex;
		pIndex << asteroidIndex;
		gText.loadFromRenderedText(pIndex.str().c_str(), {0, 191, 255, 255}, gFont13, gRenderer12);
		gText.render(gRenderer12, 5, 44, gText.getWidth(), gText.getHeight());
	}
	if (PLACING_TYPE == 4){
		SDL_Rect placeblockborder2 = { mx, my, BLOCKW * HOWMANYBLOCKSW, BLOCKH* HOWMANYBLOCKSH };
		SDL_SetRenderDrawColor(gRenderer12, 0, 244, 0, 255);
		SDL_RenderDrawRect(gRenderer12, &placeblockborder2);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//-------------------------------- Functions that include multiple Classes --------------------------------//
//---------------------------------------------------------------------------------------------------------//

// Check collision: Player Particle and Asteroid
void checkCollisionParticleAsteroid(Particle particle[], Asteroid asteroid[]) {
	for (int i = 0; i < 1024; i++) {
		for (int j = 0; j < 128; j++) {
			if (particle[i].alive) {
				if (particle[i].type == "LAZER"){
					if (asteroid[j].alive){
						if (particle[i].x + particle[i].w > asteroid[j].x && particle[i].x < asteroid[j].x + asteroid[j].w
								&& particle[i].y + particle[i].h > asteroid[j].y
								&& particle[i].y < asteroid[j].y + asteroid[j].h) {
							particle[i].collide = true;
						} else {
							particle[i].collide = false;
						}
						if (particle[i].collide){
							particle[i].time = 0;
							particle[i].alive = false;
							part.PARTICLES--;

							asteroid[j].damaged = true;
							asteroid[j].health -= particle[i].damage;
						}
					}
				}
			}
		}
	}
}

// Check collision: Player Particle and Enemy
void checkCollisionParticleEnemy(Particle particle[], Enemy enemy[]) {
	for (int i = 0; i < 1024; i++) {
		for (int j = 0; j < enem.Max; j++) {
			if (particle[i].alive) {
				if (particle[i].type == "LAZER"){
					if (enemy[j].alive){
						if (particle[i].x + particle[i].w > enemy[j].x && particle[i].x < enemy[j].x + enemy[j].w
								&& particle[i].y + particle[i].h > enemy[j].y
								&& particle[i].y < enemy[j].y + enemy[j].h) {
							particle[i].collide = true;
						} else {
							particle[i].collide = false;
						}
						if (particle[i].collide){
							particle[i].time = 0;
							particle[i].alive = false;
							part.PARTICLES--;

							enemy[j].damaged = true;
							enemy[j].health -= particle[i].damage;
						}
					}
				}
			}
		}
	}
}

// Check collision: Enemy Particle and Player
void checkCollisionParticlePlayer(Particle particle[], float x, float y, int w, int h, int &health, bool alive) {
	for (int i = 0; i < 1024; i++) {
		for (int j = 0; j < 128; j++) {
			if (particle[i].alive) {
				if (particle[i].type == "LAZER_E"){
					if (alive){
						if (particle[i].x + particle[i].w > x && particle[i].x < x + w
								&& particle[i].y + particle[i].h > y
								&& particle[i].y < y + h) {
							particle[i].collide = true;
						} else {
							particle[i].collide = false;
						}
						if (particle[i].collide){
							particle[i].time = 0;
							particle[i].alive = false;
							part.PARTICLES--;

							health -= particle[i].damage;
						}
					}
				}
			}
		}
	}
}

// Spawn an Asteroid using a Spawn Point
void spawnAsteroidsNow2(Colony colony[], Enemy enemy[], int &increment, int &wave, int score, bool &shield, int &shieldT)
{
	// Spawn an enemy after X amount of scores
	if (enem.mileScore > 1000){
		enem.mileScore = 0;
		enem.SPAWN_ENEMY = true;
		cout << "SPAWNED?" << endl;
	}

	// Spawn new wave of Enemies
	if (enem.SPAWN_ENEMY){
		int randi, randw, randh;
			randi = rand() % 4 + 1;
			switch (randi){
				case 1:{
					//TODO - make Enemy X coordinate spawn more random
					for (int j=0; j<enem.ENEMY_SPAWN; j++){
						randw = rand() % 5 + 1;
						randh = rand() % 656;
						enem.spawn(enemy, map.x-64 - (64*randw), map.y+randh, 64, 32, 0.5, 0.0, 5);
						cout << "SPAWNED" << endl;
					}
					break;
				}
				case 2:{
					for (int j=0; j<enem.ENEMY_SPAWN; j++){
						randw = rand() % 5 + 1;
						randh = rand() % 656;
						enem.spawn(enemy, map.x-64 - (64*randw), map.y+randh, 64, 32, 0.5, 0.0, 5);
					}
					break;
				}
				case 3:{
					for (int j=0; j<enem.ENEMY_SPAWN; j++){
						randw = rand() % 5 + 1;
						randh = rand() % 656;
						enem.spawn(enemy, map.x+map.w + (64*randw), map.y+randh, 64, 32, -0.5, 0.0, 5);
					}
					break;
				}
				case 4:{
					for (int j=0; j<enem.ENEMY_SPAWN; j++){
						randw = rand() % 5 + 1;
						randh = rand() % 656;
						enem.spawn(enemy, map.x+map.w + (64*randw), map.y+randh, 64, 32, -0.5, 0.0, 5);
					}
					break;
				}
			}

		// Increase enemy count
		if (enem.ENEMY_SPAWN < 5){
			enem.ENEMY_SPAWN++;
		}

		// Stop spawning Enemies
		enem.SPAWN_ENEMY 	= false;
	}

	// Check if there is 0 Asteroids
	if (checkDeathAsteroids){
		if (ASTEROIDS <= 0){
			checkDeathAsteroids = false;
			increment += rand() % 2 + 1;
			wave++;

			for (int i=0; i<1+increment; i++){
				int randVar 	= rand() % 3 + 1;
				int randx 		= rand() % 1248;
				int randy 		= rand() % 688;
				int randw 		= 4;
				int randh 		= 4;
				switch (randVar){
					case 1:
						randw = 48;
						randh = 48;
					break;
					case 2:
						randw = 96;
						randh = 96;
					break;
					case 3:
						randw = 128;
						randh = 128;
					break;
				}
				randx = rand() % 1248;
				randy = rand() % 688;
				spawnColony(colony, 0+randx, 0+randy, randw, randh);
			}

			// Give Player a 180 ms shield
			shield			= true;
			shieldT			= 180;
		}
	}

	// Start checking for no Asteroids, once we've spawned an Asteroid
	if (ASTEROIDS > 0){
		checkDeathAsteroids = true;
	}
}











